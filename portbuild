#!/bin/sh

usage () {
    echo "usage: $0 <build name> <jail name> <portstree name> [-noclean] [-plistcheck] [-nullfs] [-fetch-original] [-nolog] [-trybroken] ED PD FD BD RD pkgname dirname"
    exit 1
}

cleanup()
{
    chroot=$1
    noclean=$2
    error=$3
    cleandirs=$4
    pkgname=$5
    pb=$6
    branch=$7

    cleanup_mounts -d build -b $(basename $chroot)

    if [ $noclean = 0 ]; then
	if [ $error = 0 ]; then
	    rm -rf ${chroot}/tmp/*
	    for dir in ${cleandirs}; do
	        if ! rm -rf ${chroot}${dir} >/dev/null 2>&1; then
		    chflags -R noschg ${chroot}${dir}
		    rm -rf ${chroot}${dir} >/dev/null 2>&1
	        fi
	    done
	    chroot ${chroot} /sbin/ldconfig -R
	    chroot ${chroot} /sbin/ldconfig -aout -R
	    rm -rf ${chroot}/var/db/pkg/*
	else
	    ${pb}/scripts/mkbuild ${branch}
	fi
    fi

    echo -n "$pkgname done at "
    date

    ${pb}/scripts/tc updateBuildCurrentPort -b ${branch}

    exit $error
}

mark_failed()
{
    pb=$1
    branch=$2
    pkgname=$3
    portdir=$4

    mf="${pb}/builds/${branch}/Makefile"
    if [ ! -f "${mf}" ]; then
	return
    fi

    dependents=$(grep ${pkgname} ${mf} | grep '^[[:space:]]\{1,\}@' | awk '{print $NF}' | sed -e 's|^/usr/ports/||' | grep -v ${portdir})
    if [ $? != 0 ]; then
	return
    fi

    for dep in ${dependents}; do
	${pb}/scripts/tc updatePortLastStatus -d ${dep} -b ${branch} -s DEPEND
	${pb}/scripts/tc updatePortLastFailedDep -d ${dep} -b ${branch} -p ${portdir}
        ${pb}/scripts/tc updatePortLastBuilt -d ${dep} -b ${branch}
    done
}

# Configurable variables
pb=$0
[ -z "$(echo "${pb}" | sed 's![^/]!!g')" ] && \
pb=$(type "$pb" | sed 's/^.* //g')
pb=$(realpath $(dirname $pb))
pb=${pb%%/scripts}

. ${pb}/scripts/lib/tinderbox_shlib.sh

# Clear out the environment.
clean_env

error=0
init=0
noclean=0
nullfs=0
fetchorig=0
nolog=0

# check parameter count
if [ $# -lt 10 ]; then
    usage
fi

branch=$1
shift
jail=$1
shift
portstree=$1
shift

# Default niceness value
nice=0

if [ "x$1" = "x-noclean" ]; then
    noclean=1
    shift
fi

plistcheck=0
if [ "x$1" = "x-plistcheck" ]; then
    plistcheck=1
    export PLISTCHECK=1
    shift
fi

if [ "x$1" = "x-nullfs" ]; then
    nullfs=1
    shift
fi

if [ "x$1" = "x-fetch-original" ]; then
    fetchorig=1
    shift
fi

if [ "x$1" = "x-nolog" ]; then
    nolog=1
    shift
fi

if [ "x$1" = "x-trybroken" ]; then
    export TRYBROKEN=1
    shift
fi

ED=$1
PD=$2
FD=$3
BD=$4
RD=$5

buildenv ${pb} ${branch} ${jail} ${portstree}
# Use the *.env file to specify per-jail, per-portstree, and per-build
# environment variables.
[ -f ${pb}/jails/${jail}/jail.env ] && . ${pb}/jails/${jail}/jail.env
[ -f ${pb}/portstrees/${portstree}/portstree.env ] && \
	. ${pb}/portstrees/${portstree}/portstree.env
[ -f ${pb}/builds/${branch}/build.env ] && . ${pb}/builds/${branch}/build.env

unset DISPLAY

pkgname=$(basename $6 ${PKGSUFFIX})
dirname=$7
shift 2

echo ${pkgname}
echo ${dirname}

portdir=$(echo ${dirname} | sed -e 's|^/usr/ports/||')

execute_hook ${pb} "prePortBuild" "PACKAGE_NAME=${pkgname} BUILD=${branch} JAIL=${jail} PORTSTREE=${portstree} CHROOT=${chroot} PORTDIR=${portdir} PB=${pb}"
if [ $? != 0 ]; then
    echo "Terminating build for ${pkgname} since prePortBuild hook failed"
    ${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
    ${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s FAIL
    ${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
    ${pb}/scripts/tc updatePortLastFailReason -d ${portdir} -b ${branch} -r "hook"
    mark_failed ${pb} ${branch} ${pkgname} ${portdir}
    exit 1
fi

if [ -f ${pb}/builds/${branch}/duds ]; then
    if grep -qxF ${pkgname} ${pb}/builds/${branch}/duds; then
        echo "skipping ${pkgname} (found in duds)"
	${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
	${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s DUD
	${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
	mark_failed ${pb} ${branch} ${pkgname} ${portdir}
	execute_hook ${pb} "postPortBuild" "PACKAGE_NAME=${pkgname} BUILD=${branch} JAIL=${jail} PORTSTREE=${portstree} CHROOT=${chroot} STATUS=DUD PORTDIR=${portdir} PB=${pb}"
        exit 1
    fi
fi

# Want to use the /etc/make.conf in the chroot (Jail)
unset __MAKE_CONF
unset SRCCONF

if [ -z "${LOCALBASE}" ]; then
    export LOCALBASE=/usr/local
fi

if [ -z "${X11BASE}" ]; then
    export X11BASE=/usr/local
fi

export WRKDIRPREFIX=/work
export DISTDIR=/tmp/distfiles
export PACKAGES=/tmp/packages

# don't pass -j, -k etc. to sub-makes
unset MAKEFLAGS
unset PORTSDIR

# Unset all of the locale variables to ensure C/POSIX is used to build
# everything.
unset LC_ALL
unset LC_TIME
unset LC_CTYPE
unset LC_MONETARY
unset LC_COLLATE
unset LC_MESSAGES
unset LC_NUMERIC
unset LANG

# wait 2 hours before killing build with no output
export TIMEOUT=7200

# to prevent runaway processes -- 400 meg file size limit, two hours CPU limit
ulimit -f 16384000
ulimit -t 7200

# directories to clean
cleandirs="${LOCALBASE} ${X11BASE} /compat /var/db/pkg"

# 15 minutes
export FTP_TIMEOUT=900
export HTTP_TIMEOUT=900

export FTP_PASSIVE_MODE=yes

export BATCH=1
export PACKAGE_BUILDING=1

export PORTOBJFORMAT=elf

export USA_RESIDENT=yes

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:${LOCALBASE}/sbin:${LOCALBASE}/bin:${X11BASE}/bin

# Set HOME to be /root to avoid errant leftover files
export HOME=/root

# Just to be shure we start in a clean build-tree
cleanup_mounts -d build -b ${branch}

if [ x"${CCACHE_ENABLED}" = x"1" ]; then
    # XXX We need to do this since certain ports (e.g. cdrtools) don't
    # respect CC the way they should (thanks for the tip, Adam).
    export PATH=/opt:${PATH}
fi

if [ x"${OPTIONS_ENABLED}" = x"1" ]; then
    export PORT_DBDIR=${chroot}/var/db/ports
fi

echo "building $pkgname in $chroot"

${pb}/scripts/tc updateBuildStatus -b ${branch} -s PORTBUILD
${pb}/scripts/tc updateBuildCurrentPort -b ${branch} -n ${pkgname} -d ${portdir}

chroot=${pb}/${branch}
packages=${pb}/packages/${branch}

major_version=$(echo ${jail} | sed -E -e 's|(^.).*$|\1|')

if [ "${major_version}" = "4" ]; then
    mkdir -p ${chroot}/libexec
    mkdir -p ${chroot}/lib
    if [ "${ARCH}" = "i386" -o "${ARCH}" = "amd64" ]; then
        cp -p /sbin/mount /sbin/umount ${chroot}/sbin
        cp -p /lib/libufs.so.[0-9]* ${chroot}/lib
    fi
    cp -p /libexec/ld-elf.so.1 ${chroot}/libexec
    cp -p /lib/libkvm.so.[0-9]* /lib/libm.so.[0-9]* ${chroot}/lib
    if [ -f /lib/libc.so.7 ]; then
	if [ -f ${chroot}/lib/libc.so.7 ]; then
	    chflags noschg ${chroot}/lib/libc.so.7
	fi
	cp -p /lib/libc.so.7 ${chroot}/lib
    elif [ -f /lib/libc.so.6 ]; then
	if [ -f ${chroot}/lib/libc.so.6 ]; then
		chflags noschg ${chroot}/lib/libc.so.6
	fi
	cp -p /lib/libc.so.6 ${chroot}/lib
    else
	if [ -f ${chroot}/lib/libc.so.5 ]; then
		chflags noschg ${chroot}/lib/libc.so.5
	fi
	cp -p /lib/libc.so.5 ${chroot}/lib
    fi
elif [ "${major_version}" = "6" -o "${major_version}" = "7" ]; then
    if [ -f /lib/libc.so.5 ]; then
        if [ -f ${chroot}/lib/libc.so.5 ]; then
	    chflags noschg ${chroot}/lib/libc.so.5
        fi
        cp -p /lib/libc.so.5 ${chroot}/lib
    fi
    if [ "${major_version}" = "6" -a -f /lib/libc.so.7 ]; then
	if [ -f ${chroot}/lib/libc.so.7 ]; then
	    chflags noschg ${chroot}/lib/libc.so.7
	fi
	cp -p /lib/libc.so.7 ${chroot}/lib
    fi
elif [ "${major_version}" = "5" ]; then
    if [ -f /lib/libc.so.6 ]; then
        if [ -f ${chroot}/lib/libc.so.6 ]; then
	    chflags noschg ${chroot}/lib/libc.so.6
        fi
        cp -p /lib/libc.so.6 ${chroot}/lib
    elif [ -f /lib/libc.so.7 ]; then
       if [ -f ${chroot}/lib/libc.so.7 ]; then
           chflags noschg ${chroot}/lib/libc.so.7
       fi
       cp -p /lib/libc.so.7 ${chroot}/lib
    fi
fi
cp -p /rescue/mount /rescue/umount ${chroot}/sbin
cp -p /rescue/ps ${chroot}/bin

# XXX This is a hack to fix some recent pkg_add problems in some releases.
if [ -f ${pb}/jails/${jail}/pkg_install.tar ]; then
    tar -C ${chroot} -xf ${pb}/jails/${jail}/pkg_install.tar
fi

if [ x"${CCACHE_ENABLED}" = x"1" -a -f ${pb}/jails/${jail}/ccache.tar ]; then
    tar -C ${chroot} -xf ${pb}/jails/${jail}/ccache.tar
fi

echo ${OSREL}-${BRANCH} > ${chroot}/usr/bin/UNAME_VERSION

trap  "cleanup ${chroot} ${noclean} ${error} \"${cleandirs}\" ${pkgname} ${pb} ${branch}" 1 2 3 9 10 11 15

if [ -n "${DISTFILE_CACHE}" ]; then
    export DISTCACHE=/distcache
    mkdir -p ${chroot}${DISTCACHE}
    if [ ${fetchorig} = 0 ]; then
        _MASTER_SITE_OVERRIDE='file:///distcache/${DIST_SUBDIR}/'
        export MASTER_SITE_OVERRIDE="${_MASTER_SITE_OVERRIDE} ${MASTER_SITE_OVERRIDE}"
    fi
fi

rm -rf ${chroot}/tmp/*
cd ${chroot}/tmp
mkdir -p depends distfiles packages

echo "building ${pkgname} in directory ${chroot}" | tee ${chroot}/tmp/${pkgname}.log

# If we're using a central distfile repository, mount it now
if [ -n "${DISTFILE_CACHE}" ] ; then
	request_mount -d distcache -b ${branch} -s "${DISTFILE_CACHE}"
fi

# intentionally set up ${PORTSDIR} with symlink to catch broken ports
mkdir -p ${chroot}/a/ports
rm -rf ${chroot}/usr/ports

if [ ${nullfs} -eq 1 ] ; then
	request_mount -n -r -d buildports -b ${branch}
else
	request_mount -r -d buildports -b ${branch}
fi

ln -sf ../a/ports ${chroot}/usr/ports

# Don't build in a world-writable standard directory because some ports
# hardcode this path and try to load things from it at runtime, which is
# bad for user security
rm -rf ${chroot}/${WRKDIRPREFIX}
mkdir -p ${chroot}/${WRKDIRPREFIX}

mkdir -p ${chroot}/usr/src

if [ ${nullfs} -eq 1 ] ; then
	request_mount -n -r -d buildsrc -b ${branch}
else
	request_mount -r -d buildsrc -b ${branch}
fi

mount -t devfs foo ${chroot}/dev

if [ x"${CCACHE_ENABLED}" = x"1" ]; then
    mkdir -p ${pb}/${CCACHE_DIR}/${branch}
    mkdir -p ${chroot}/${CCACHE_DIR}
    if [ x"${CCACHE_JAIL}" = x"1" ]; then
	if [ ${nullfs} -eq 1 ] ; then
		request_mount -n -d ccache -s ${pb}/${CCACHE_DIR}/${jail} -b ${branch}
	else
		request_mount -d ccache -s ${pb}/${CCACHE_DIR}/${jail} -b ${branch}
	fi
    else
	if [ ${nullfs} -eq 1 ] ; then
		request_mount -n -d ccache -s ${pb}/${CCACHE_DIR}/${branch} -b ${branch}
	else
		request_mount -d ccache -s ${pb}/${CCACHE_DIR}/${branch} -b ${branch}
	fi
    fi
    if [ -n "${CCACHE_MAX_SIZE}" ]; then
        # Example: CCACHE_MAX_SIZE=2G (2 GB)
        # G=GB, M=MB, K=KB
        chroot ${chroot} ccache -M ${CCACHE_MAX_SIZE}
    fi
    unset CCACHE_DISABLE
fi

if [ ${OPTIONS_ENABLED} -eq 1 ]; then
    mkdir -p ${pb}/${OPTIONS_DIR}/${branch}
    mkdir -p ${chroot}/var/db/ports

    if [ ${nullfs} -eq 1 ] ; then
	request_mount -n -d options -s ${pb}/${OPTIONS_DIR}/${branch} -b ${branch}
    else
	request_mount -d options -s ${pb}/${OPTIONS_DIR}/${branch} -b ${branch}
    fi
fi

for dir in ${cleandirs}; do
    if ! rm -rf ${chroot}${dir} >/dev/null 2>&1; then
	chflags -R noschg ${chroot}${dir}
	rm -rf ${chroot}${dir} >/dev/null 2>&1
    fi
done

rm -rf ${chroot}/var/db/pkg/*

mtree -deU -f ${chroot}/etc/mtree/BSD.root.dist -p ${chroot} \
  >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.var.dist -p ${chroot}/var \
  >/dev/null 2>&1
mtree -deU -f ${chroot}/etc/mtree/BSD.usr.dist -p ${chroot}/usr \
  >/dev/null 2>&1

mkdir -p ${chroot}${LOCALBASE}
if [ -f ${chroot}/a/ports/Templates/BSD.local.dist ]; then
    mtree -deU -f ${chroot}/a/ports/Templates/BSD.local.dist -p ${chroot}${LOCALBASE} \
    	>/dev/null 2>&1
else
    mtree -deU -f ${chroot}/etc/mtree/BSD.local.dist -p ${chroot}${LOCALBASE} \
  	>/dev/null 2>&1
fi

mkdir -p ${chroot}${X11BASE}
if [ $X_WINDOW_SYSTEM = "xfree86-3" ]; then
    mtree -deU -f ${chroot}/usr/src/etc/mtree/BSD.x11.dist -p ${chroot}${X11BASE} >/dev/null 2>&1
else
#    if [ -f ${chroot}/a/ports/Templates/BSD.local.dist ]; then
#	mtree -deU -f ${chroot}/a/ports/Templates/BSD.local.dist -p ${chroot}${X11BASE} \
#		>/dev/null 2>&1
#    else
	mtree -deU -f ${chroot}/usr/src/etc/mtree/BSD.x11-4.dist -p ${chroot}${X11BASE} \
		>/dev/null 2>&1
#    fi
fi

if [ ${ARCH} = "i386" -o ${ARCH} = "amd64" ]; then
    # JDK ports need linprocfs :(
    mkdir -p ${chroot}/compat/linux/proc
    mount -t linprocfs linprocfs ${chroot}/compat/linux/proc
fi

# mount procfs
mkdir -p ${chroot}/proc
mount -t procfs procfs ${chroot}/proc

_ldconfig_dirs="/lib /usr/lib /usr/lib/compat"
ldconfig_dirs=""
for i in ${_ldconfig_dirs}; do
    if [ -d ${chroot}/${i} ]; then
	ldconfig_dirs="${ldconfig_dirs} ${i}"
    fi
done
chroot ${chroot} /sbin/ldconfig ${ldconfig_dirs}
if [ ${ARCH} = "i386" ]; then
    chroot ${chroot} /sbin/ldconfig -aout /usr/lib/aout /usr/lib/compat/aout
fi

set x $ED $FD $PD $BD $RD
shift 1
while [ $# -gt 0 ]; do
    if [ -f ${packages}/All/$1 ]; then
	if [ ! -f ${chroot}/tmp/depends/$1 ]; then
	    echo "copying package $1 for ${pkgname}"
	    cp -p ${packages}/All/$1 ${chroot}/tmp/depends
	fi
    else
	echo "skipping package $1 for ${pkgname} since it is missing"
    fi
    shift
done

if ! cp -p ${pb}/scripts/buildscript ${chroot}; then
    error=3
    cleanup ${chroot} ${noclean} ${error} "${cleandirs}" ${pkgname} ${pb} ${branch}
fi
if ! cc -o ${chroot}/pnohang -static ${pb}/scripts/pnohang.c; then
    error=4
    cleanup ${chroot} ${noclean} ${error} "${cleandirs}" ${pkgname} ${pb} ${branch}
fi

chroot ${chroot} /buildscript ${dirname} 1 "$ED" "$PD" "$FD" "$BD" "$RD" 2>&1 | tee -a ${chroot}/tmp/${pkgname}.log
if [ -f ${chroot}/tmp/status ]; then
    error=$(cat ${chroot}/tmp/status)
else
    error=255
fi

last_version=$(${pb}/scripts/tc getPortLastBuiltVersion -d ${portdir} -b ${branch})

if [ "${error}" = 0 ]; then
    ln -sf ${pkgname}.log2 ${chroot}/tmp/make.log
    # Cache the distfiles if requested.  We will wait a maximum of
    # ten minutes before giving up on the lock.
    if [ -n "${DISTFILE_CACHE}" ]; then
	lockf -t 600 ${chroot}${DISTCACHE}/.lock tar -C ${chroot}/${DISTDIR} \
		-cf - . | tar --unlink -C ${chroot}${DISTCACHE} -xvf -
    fi

    chroot ${chroot} /usr/bin/nice -n $nice /buildscript ${dirname} 2  "$ED" "$PD" "$FD" "$BD" "$RD" > ${chroot}/tmp/${pkgname}.log2 2>&1

    grep pnohang ${chroot}/tmp/${pkgname}.log2
    cat ${chroot}/tmp/${pkgname}.log2 >> ${chroot}/tmp/${pkgname}.log
    rm ${chroot}/tmp/${pkgname}.log2

    cp ${chroot}/tmp/${pkgname}.log ${pb}/logs/${branch}/${pkgname}.log
    error=$(cat ${chroot}/tmp/status)

    rm -rf ${chroot}/${WRKDIRPREFIX}

    if [ -e ${chroot}/tmp/work.tbz ]; then
	mkdir -p ${pb}/wrkdirs/${branch}
	cp ${chroot}/tmp/work.tbz ${pb}/wrkdirs/${branch}/${pkgname}.tbz
    fi

    if [ "${error}" = 0 ]; then
        if [ ! -z "${last_version}" ]; then
	    oldpkgs=$(find ${packages} -name "${last_version}${PKGSUFFIX}")
	    for _pkg in ${oldpkgs}; do
	        echo "INFO: Removing old package ${_pkg}."
	        rm -f ${_pkg}
	    done
        fi
	tar -C ${chroot}/tmp/packages -cf - . | \
		tar --unlink -C ${packages} -xvf -
	[ -f ${packages}/All/${pkgname}${PKGSUFFIX} ] && \
		touch ${packages}/All/${pkgname}${PKGSUFFIX}
	rm -f ${pb}/errors/${branch}/${pkgname}.log
	if grep -q "${pkgname} is marked as broken: " ${pb}/logs/${branch}/${pkgname}.log ; then
	    status="BROKEN"
	elif [ -f ${chroot}/tmp/leftovers ]; then
	    status="LEFTOVERS"
	else
	    status="SUCCESS"
	fi
	${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
	${pb}/scripts/tc updatePortLastSuccessfulBuilt -d ${portdir} -b ${branch}
	${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s ${status}
	${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
	${pb}/scripts/tc updatePortLastFailReason -d ${portdir} -b ${branch} -r "__nofail__"
	execute_hook ${pb} "postPortBuild" "PACKAGE_NAME=${pkgname} BUILD=${branch} JAIL=${jail} PORTSTREE=${portstree} CHROOT=${chroot} STATUS=${status} PORTDIR=${portdir} PB=${pb}"
    else
	cp ${chroot}/tmp/${pkgname}.log ${pb}/errors/${branch}/${pkgname}.log
	if [ ${nolog} = 0 ]; then
	    reason=$(${pb}/scripts/tc processLog -l ${pb}/errors/${branch}/${pkgname}.log)
	    ${pb}/scripts/tc updatePortLastFailReason -d ${portdir} -b ${branch} -r ${reason}
	fi
	${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
	${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s FAIL
	${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
	mark_failed ${pb} ${branch} ${pkgname} ${portdir}
        ${pb}/scripts/tc sendBuildErrorMail -d ${portdir} -b ${branch} -p ${pkgname}
	execute_hook ${pb} "postPortBuild" "PACKAGE_NAME=${pkgname} BUILD=${branch} JAIL=${jail} PORTSTREE=${portstree} CHROOT=${chroot} STATUS=FAIL PORTDIR=${portdir} PB=${pb}"
    fi
else
    cp ${chroot}/tmp/${pkgname}.log ${pb}/errors/${branch}/${pkgname}.log
    cp ${chroot}/tmp/${pkgname}.log ${pb}/logs/${branch}/${pkgname}.log

    if [ ${nolog} = 0 ]; then
	reason=$(${pb}/scripts/tc processLog -l ${pb}/errors/${branch}/${pkgname}.log)
	${pb}/scripts/tc updatePortLastFailReason -d ${portdir} -b ${branch} -r ${reason}
    fi
    ${pb}/scripts/tc updatePortLastBuilt -d ${portdir} -b ${branch}
    ${pb}/scripts/tc updatePortLastStatus -d ${portdir} -b ${branch} -s FAIL
    ${pb}/scripts/tc updatePortLastBuiltVersion -d ${portdir} -b ${branch} -v ${pkgname}
    mark_failed ${pb} ${branch} ${pkgname} ${portdir}
    ${pb}/scripts/tc sendBuildErrorMail -d ${portdir} -b ${branch} -p ${pkgname}
	execute_hook ${pb} "postPortBuild" "PACKAGE_NAME=${pkgname} BUILD=${branch} JAIL=${jail} PORTSTREE=${portstree} CHROOT=${chroot} STATUS=FAIL PORTDIR=${portdir} PB=${pb}"
fi

cleanup ${chroot} ${noclean} ${error} "${cleandirs}" ${pkgname} ${pb} ${branch}
